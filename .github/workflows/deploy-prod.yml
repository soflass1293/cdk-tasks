name: Deploy to production

on:
  push: 
    branches:
     - main
     
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: prod

jobs:
  deploy:
    env:
      STAGE: prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
      - name: Install dependencies
        run: npm install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::042405425993:role/GitHubAdminAccess
          aws-region: us-east-1
      - name: Deploy
        working-directory: ./backend
        run: npx cdk deploy --all --verbose --require-approval never --concurrency 5
      - name: Comment PR
        uses: actions/github-script@v7
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComments = comments.filter(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deployed to')
            });
            // 2. Delete previous comments so PR timeline makes sense
            botComments.forEach(botComment => {
               github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            });
            // 3. Create new comment
            const fs = require('fs')
            const path = require('path')
            const jsonString = fs.readFileSync(path.resolve('backend/cdk.out/resources.json'))
            const output = `Deployed to ${{env.APP_NAME}}
            <details><summary>View stack outputs</summary>

            \`\`\`json
            ${jsonString}
            \`\`\`

            </details>`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });