name: Deploy to development

on:
  push: 
    branches:
     - dev
     
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: dev

jobs:
  deploy:
    env:
      STAGE: dev
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
      - name: Install dependencies
        run: npm install
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::042405425993:role/GitHubAdminAccess
          aws-region: us-east-1
      - name: Deploy
        working-directory: ./backend
        run: npx cdk deploy --all --verbose --require-approval never --concurrency 5 --outputs-file cdk.out/resources.json
      - name: Comment on Push
        uses: actions/github-script@v7
        id: push-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if the event is a push to the "dev" branch
            if (context.ref === 'refs/heads/dev') {
              // 1. Retrieve existing bot comments for the latest commit
              const { data: comments } = await github.rest.repos.listCommentsForCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
              });

              const botComments = comments.filter(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Deployed to');
              });

              // 2. Delete previous comments so commit timeline makes sense
              for (const botComment of botComments) {
                await github.rest.repos.deleteCommitComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                });
              }

              // 3. Create new comment
              const fs = require('fs');
              const path = require('path');
              const jsonString = fs.readFileSync(path.resolve('backend/cdk.out/resources.json'), 'utf8');
              const output = `Deployed to ${{ env.APP_NAME }}
              <details><summary>View stack outputs</summary>

              \`\`\`json
              ${jsonString}
              \`\`\`

              </details>`;

              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: output,
              });
            }
